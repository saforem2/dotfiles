scriptencoding utf-8

if has('nvim') && !empty($CONDA_PREFIX)
    let g:python3_host_prog = $CONDA_PREFIX . '/bin/python'
endif
" let g:python3_host_prog = expand('~/python')
let g:vimtex_compiler_progname = 'nvr'

" Enable all syntax highlighting features for python
" let python_highlight_all = 1
let g:python_highlight_all = 1

"automatically expand all tabs when opening buffer
au BufRead * normal zR
au BufWinEnter * normal zR
" generic universal settings {{{
set nocompatible
filetype off
set t_Co=256
set encoding=utf8
set updatetime=100
set mouse=a
set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor
set scrolloff=5
set viewoptions-=options
" Automatically re-read file if a change was detected outside of vim
set grepprg=grep\ -nH\ $*
set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor
let g:tex_flavor="latex"
set modeline
" set shell=/bin/zsh
set shell=/usr/local/bin/fish
" set number
" set relativenumber
set pastetoggle=<F2>
syntax on
syntax enable
" au BufNewFile,BufRead *.m set filetype=matlab
set shiftwidth=4
set tabstop=4
" to change file from 2 space tabs to 4 space tabs:
" :set ts=2 sts=2 noet
" :retab!
" :set ts=4 sts=4 et
" :retab!
set clipboard=unnamedplus
set confirm
set softtabstop=4
set autoindent
set autoread " reload a file if it was changed outside of Vim"
set nostartofline
set ignorecase
set smartcase
set smartindent
set ruler
set background=dark
set hlsearch

set incsearch
set showmatch
set hidden
" set autowriteall
set wildmenu
set lazyredraw
set wildmode=list:longest,full
set showcmd
set cmdheight=2
set backupdir=./.backup,.,/tmp
set undodir=~/.undodir,./.backup,~/.backup,.,/tmp
set undofile
set directory=.,./.backup,/tmp
set backspace=indent,eol,start
set formatoptions-=r
set breakindent  " preserve horizontal whitespace when wrapping
set showbreak=...
set lbr
" }}}


" UI {{{
" Maintain indent when wrapping
if exists('+breakindent')
    set breakindent
endif

" Highlight textwidth column
set colorcolumn=+1

" Folds {{{
" Enable folding
set foldmethod=expr
set foldlevel=99
set foldlevelstart=99

" Auto-close folds below current foldlevel when cursor leaves
" set foldclose=all
" Use folds in .vimrc
autocmd FileType vim set fdm=marker fdl=9

let maplocalleader = ";"

" Enable folding with the spacebar
" Enable folding with the spacebar

augroup AutoSaveFolds
  autocmd!
  " view files are about 500 bytes
  " bufleave but not bufwinleave captures closing 2nd tab
  " nested is needed by bufwrite* (if triggered via other autocmd)
  autocmd BufWinLeave,BufLeave,BufWritePost ?* nested silent! mkview!
  autocmd BufWinEnter ?* silent! loadview
augroup end

let g:fastfold_savehook = 1
let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
let g:tex_fold_enabled=1
let g:vimsyn_folding='af'
let g:xml_syntax_folding = 1
let g:php_folding = 1
let g:perl_fold = 1

" Keep folds after writing to file
" augroup remember_folds
"   autocmd!
"   autocmd BufWinLeave * mkview
"   autocmd BufWinEnter * silent! loadview
" augroup END
"
" See docstrings for folded code
" let g:SimpylFold_docstring_preview=1
" let g:SimpylFold_fold_docstring=1
" set foldtext=getline(v:foldstart+2)
" set foldtext=v:folddashes.substitute(getline(v:foldstart),'/\\*\\\|\\*/\\\|{{{\\d\\=','','g')
"
""" python foldings {{{
syntax region pythonFunctionFold	start="^\%(def\)\>"
  \ end="\%(\s*\n\)\{1,3}\ze\%(\s*\n\)*\%(\s\)\@!." fold transparent
syntax region pythonMethodFold	start="^\z(\s\+\)\%(def\)\>"
  \ end="\%(\s*\n\)\{1,2}\ze\%(\s*\n\)*\%(\z1\s\)\@!." fold transparent
syntax region pythonClassFold	start="^\z(\s*\)\%(class\)\>"
  \ end="\%(\s*\n\)\{1}\ze\%(\s*\n\)*\%(\z1\s\)\@!." fold transparent
syntax region pythonDocString	start=+[uU]\="""+ end=+"""+ fold contains=pythonEscape,@Spell,pythonArgs,pythonKwargs
syntax region pythonDocString	start=+[uU]\='''+ end=+'''+ fold contains=pythonEscape,@Spell,pythonArgs,pythonKwargs
""" }}}
" }}}

" Display incomplete commands
set showcmd

" Reasonable tab completion
set wildmode=full

" Save automatically all the time
" augroup auto_save
"     autocmd!
"     " Frequently save automatically
"     autocmd BufLeave,FocusLost,InsertLeave,TextChanged * silent! wall
"     autocmd BufEnter,BufWinEnter,CursorHold,FocusGained * silent! checktime
" augroup END

set fileformats+=mac

" Search within subfolders by default
set path+=**
" But ignore noise
set path-=.git,build,lib,node_modules,public,_site,third_party

" Ignore autogenerated files
set wildignore+=*.o,*.obj,*.pyc
" Ignore source control
set wildignore+=.git
" Ignore lib/ dirs since they contain compiled libraries typically
set wildignore+=build,lib,node_modules,public,_site,third_party
" Ignore images and fonts
set wildignore+=*.gif,*.jpg,*.jpeg,*.otf,*.png,*.svg,*.ttf
" Ignore case when completing
set wildignorecase
" }}}

" Completion {{{
" Keyword completion brings in the dictionary if spell check is enabled
set complete+=kspell

" Show matching brackets for half a second
set showmatch
set matchtime=5

" Searching {{{
" Match all results in a line by default (/g at end will undo this)
" set gdefault

" */# in visual mode searches for selected text, similar to normal mode
vnoremap * :<C-u>call <SID>VisualSetSearch('/')<cr>/<C-R>=@/<cr><cr>
vnoremap # :<C-u>call <SID>VisualSetSearch('#')<cr>/<C-R>=@/<cr><cr>

" Kick the habit of using <C-c> instead of <C-[>, since <C-c> breaks
" nvim-completion-manager
inoremap <C-c> <C-[>:echom "Use C-[ instead!"<cr>

" Quickly edit current buffer in a new tab (poor-man's maximize)
nnoremap <leader>te :tabedit %<cr>

" Linting for vimscript
if executable('vint')
    let s:automake_filetypes += ['*.vim', '*.vimrc']

    autocmd FileType vim setlocal makeprg=vint\ --enable-neovim\ \-s\ %
endif


" let s:maxoff = 50 " maximum number of lines to look backwards.
set pumblend=10  " enable popmenu transparency
set winbl=10


" Indent Python in the Google way {{{
setlocal indentexpr=GetGooglePythonIndent(v:lnum)

" let s:maxoff = 50 " maximum number of lines to look backwards.

function GetGooglePythonIndent(lnum)

  " Indent inside parens.
  " Align with the open paren unless it is at the end of the line.
  " E.g.
  "   open_paren_not_at_EOL(100,
  "                         (200,
  "                          300),
  "                         400)
  "   open_paren_at_EOL(
  "       100, 200, 300, 400)
  call cursor(a:lnum, 1)
  let [par_line, par_col] = searchpairpos('(\|{\|\[', '', ')\|}\|\]', 'bW',
        \ "line('.') < " . (a:lnum - s:maxoff) . " ? dummy :"
        \ . " synIDattr(synID(line('.'), col('.'), 1), 'name')"
        \ . " =~ '\\(Comment\\|String\\)$'")
  if par_line > 0
    call cursor(par_line, 1)
    if par_col != col("$") - 1
      return par_col
    endif
  endif

  " Delegate the rest to the original function.
  return GetPythonIndent(a:lnum)

endfunction

let pyindent_nested_paren="&sw*2"
let pyindent_open_paren="&sw*2"
" }}}


set path=.,,**
set splitbelow
set splitright

"Have vim flax extraneous whitespace
" highlight BadWhitespace ctermbg=234
highlight SpellBad term=reverse ctermbg=1

au BufNewFile, BufRead *.html
            \ set tabstop=2 |
            \ set shiftwidth=2 |
            \ set softtabstop=2 |
            \ set expandtab |
            \ set autoindent




""" .py filetype settings {{{
au BufNewFile,BufRead *.py
	\ set cul | 
    \ set cursorcolumn | 
	\ set tabstop=4 |
	\ set softtabstop=4 |
	\ set shiftwidth=4 |
	\ set textwidth=79 |
	\ set expandtab |
	\ set autoindent |
	\ set fileformat=unix |
	\ set colorcolumn=80 |
    \ set foldlevelstart=99 |
    \ set foldmethod=expr
""" }}}

""" .tex filetype settings {{{
au BufNewFile,BufRead *.tex
	\ set tabstop=2 |
	\ set softtabstop=2 |
	\ set shiftwidth=2 |
	\ set textwidth=120 |
	\ set expandtab |
	\ set autoindent |
	\ set fileformat=unix |
	\ set colorcolumn=120 |
    \ set foldmethod=expr |
    \ let &colorcolumn=join(range(121,999),",")
""" }}}

set linespace=0

" Enable indent-guides, autocolor
" let g:indent_guides_autocolors = 0
" autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=#13354A  ctermbg=233
" autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#232526 ctermbg=232

augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

if has("nvim")
	set termguicolors
	let $NVIM_TUI_ENABLE_CURSOR_SHAPE = 1
elseif empty($TMUX)
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  let &t_SR = "\<Esc>]50;CursorShape=2\x7"
else
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
endif


set rtp+=/Users/saforem2/powerline/bindings/vim

set wrap
set textwidth=120
" Make cursor move as expected with wrapped lines
"inoremap <Down> <C-o>gj
"inoremap <Up>< <C-o>gk

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""" SERVED ME WELL"""""""""""""""""""""""""""""""
" colorscheme molokai_sam  <---- NOT THIS ONE
" colorscheme molokai_new
" colorscheme molokai_new
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" colorscheme ThemerVim


" highlight Comment cterm=italic



" ViM autocommands for binary plist files
" Copyright (C) 2005 Moritz Heckscher
"
" Note: When a file changes externally and you answer no to vim's question if
" you want to write anyway, the autocommands (e.g. for BufWritePost) are still
" executed, it seems, which could have some unwanted side effects.
"
" This program is free software; you can redistribute it and/or modify
" it under the terms of the GNU General Public License as published by
" the Free Software Foundation; either version 2 of the License, or
" (at your option) any later version.
"
" This program is distributed in the hope that it will be useful,
" but WITHOUT ANY WARRANTY; without even the implied warranty of
" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
" GNU General Public License for more details.
augroup plist
  " Delete existing commands (avoid problems if this file is sourced twice)
  autocmd!

  " Set binary mode (needs to be set _before_ reading binary files to avoid
  " breaking lines etc; since setting this for normal plist files doesn't
  " hurt and it's not yet known whether or not the file to be read is stored
  " in binary format, set the option in any case to be sure).
  " Do it before editing a file in a new buffer and before reading a file
  " into in an existing buffer (using ':read foo.plist').
  autocmd BufReadPre,FileReadPre *.plist set binary


" It's useful to show the buffer number in the status line.
"set laststatus=2 
" statusline=%02n:%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P

"allow backspacing over everything in insert mode
set backspace=indent,eol,start
set showcmd		" show incomplete cmds down the bottom
set noshowmode	" don't show current mode down the bottom
set listchars=tab:▷⋅,trail:⋅,nbsp:⋅
set shortmess+=c

set directory=~/.vim/swapfiles//

"make table-mode tables github-markdown compat
let g:table_mode_corner="|"

let g:python_highlight_all = 1
let g:python_highlight_builtins = 1
let g:python_highlight_exceptions = 1
let g:python_highlight_space_errors=1
let g:python_highlight_indent_errors=1
let g:python_highlight_string_formatting=1
let g:python_highlight_string_format=1
let g:python_highlight_string_templates=1
let g:python_highlight_exceptions=1
let g:python_highlight_builtin_funcs_kwarg=1
let g:python_highlight_doctests=1
let g:python_highlight_class_vars=1
let g:python_highlight_operators=1
" let g:python_highlight_builtin_funcs=1
" let g:python_highlight_builtin_objs=1
" let g:python_highlight_builtin_objs=1

set number relativenumber

augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter * set norelativenumber
augroup END


" let g:macvim_transparency_step = 10
" let g:macvim_transparency_roller = [0,50,100]
"
"
" c/c++ FileType settings {{{
autocmd FileType hpp setlocal noai nocin nosi inde=
autocmd FileType cpp setlocal noai nocin nosi inde=
autocmd FileType h setlocal noai nocin nosi inde=
autocmd FileType c setlocal noai nocin nosi inde=

autocmd FileType hpp setlocal ai cin si
autocmd FileType h setlocal ai cin si
autocmd FileType cpp setlocal ai cin si
autocmd FileType c setlocal ai cin si
" }}

" nim FileType settings {{{
autocmd BufNewFile,BufRead *.nim set syntax=nim
autocmd BufNewFile,BufRead *.nims set syntax=nim
" }}}

autocmd FileType py setlocal cul cursorcolumn

filetype plugin indent on 
set cindent
au FileType * setlocal formatoptions-=r

"highlight current line
hi CursorLine term=none ctermbg=3
hi CursorColumn term=none ctermbg=3
set cul
set cursorcolumn

" set foldmethod=indent

autocmd FileType python set foldmethod=expr

set shiftwidth=4 tabstop=4 expandtab



" background
if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
"For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
"Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
" < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
if (has("termguicolors"))
    set termguicolors
endif
"set background=dark
" set t_Co=256
" set t_ut=

" let g:Vsd.contrast = 2  " high

function! g:CoiledSnakeConfigureFold(fold)

    " Don't fold nested classes.
    if a:fold.type == 'class'
        let a:fold.max_level = 1

    " Don't fold nested functions, but do fold methods (i.e. functions 
    " nested inside a class).
    elseif a:fold.type == 'function'
        let a:fold.max_level = 1
        if get(a:fold.parent, 'type', '') == 'class'
            let a:fold.max_level = 2
        endif

    " Only fold imports if there are 3 or more of them.
    elseif a:fold.type == 'import'
        let a:fold.min_lines = 3
    endif

    " Don't fold anything if the whole program is shorter than 30 lines.
    if line('$') < 30
        let a:fold.ignore = 1
    endif

endfunction

" function! MyFoldText() " {{{
"     let line = getline(v:foldstart)
"
"     let nucolwidth = &fdc + &number * &numberwidth
"     let windowwidth = winwidth(0) - nucolwidth - 3
"     let foldedlinecount = v:foldend - v:foldstart
"
"     " expand tabs into spaces
"     let onetab = strpart('          ', 0, &tabstop)
"     let line = substitute(line, '\t', onetab, 'g')
"
"     let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
"     let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
"     return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
" endfunction " }}}
" set foldtext=MyFoldText()
" }}}
if has('folding')
	set foldtext=FoldText()
endif

" Improved Vim fold-text
" See: http://www.gregsexton.org/2011/03/improving-the-text-displayed-in-a-fold/
function! FoldText()
	" Get first non-blank line
	let fs = v:foldstart
	while getline(fs) =~? '^\s*$' | let fs = nextnonblank(fs + 1)
	endwhile
	if fs > v:foldend
		let line = getline(v:foldstart)
	else
		let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
	endif

	let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
	let foldSize = 1 + v:foldend - v:foldstart
	let foldSizeStr = ' ' . foldSize . ' lines '
	let foldLevelStr = repeat('+--', v:foldlevel)
	let lineCount = line('$')
	let foldPercentage = printf('[%.1f', (foldSize*1.0)/lineCount*100) . '%] '
	let expansionString = repeat('.', w - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))
	return line . expansionString . foldSizeStr . foldPercentage . foldLevelStr
endfunction

autocmd Syntax c,cpp,vim,xml,html,xhtml,py setlocal foldmethod=expr
autocmd Syntax py normal zR

autocmd FileType * exe "normal zR"

set foldlevelstart=99
